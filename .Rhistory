find.package('devtools')
find.package("devtools")
install.packages("devtools")
find_rtools()
library(devtools)
find_rtools()
?t-test
?ttest
?t_test
?t-test
?t.test
m <- 1100
s <- 30
n<- 9
qt(0.975, df = n-1)*s/sqrt(n)
error <- qt(0.975, df = n-1)*s/sqrt(n)
m - error
m+error
n <- 9
m<-0
m<- -2
eqt(0.975, df = n-1)
qt(0.975, df = n-1)
qt(0.975, df = n-1)/sqrt(n)
2.10/0.768
2.60/0.768
1.50/0.768
ym <- 0.6
xm <- 0.68
nx <- 10
ny <- 10
mx <- 3
my <- 5
sx <- 0.6
sy<- 0.68
sp <- sqrt( ( (nx-1)*sx^2 + (ny-1)*ny^2) / (nx+ny-2) )
my - mx +c(-1,1) * qt(0.975, nx+ny-2)*sp * sqrt(1/nx + 1/ny)
my - mx +c(-1,1) * qt(0.975, nx+ny-2)*sp * sqrt(1/nx + 1/ny)/2
l <- my - mx +c(-1,1) * qt(0.975, nx+ny-2)*sp * sqrt(1/nx + 1/ny)
l/2
mx - my +c(-1,1) * qt(0.975, nx+ny-2)*sp * sqrt(1/nx + 1/ny)
mx <- 4
my <- 6
sx <- 0.5
sy <- 2
nx <- 100
ny <- 100
mx - my +c(-1,1) * qt(0.975, nx+ny-2)*sp * sqrt(1/nx + 1/ny)
my-mx +c(-1,1) * qt(0.975, nx+ny-2)*sp * sqrt(1/nx + 1/ny)
mx <- -3
my <- 1
sx <- 1.5
sy <- 1.8
nx <- 9
ny <- 9
mx-my +c(-1,1) * qt(0.975, nx+ny-2)*sp * sqrt(1/nx + 1/ny)
mx-my +c(-1,1) * qt(0.95, nx+ny-2)*sp * sqrt(1/nx + 1/ny)
-9.83/2
1.83/2
lci_high = 0
m = -2
n = 9
sd<-ci_high - m * sqrt(n) / qt(p=.95+(1-.95)/2, df=n-1)
ci_high = 0
m = -2
n = 9
sd<-ci_high - m * sqrt(n) / qt(p=.95+(1-.95)/2, df=n-1)
sd
v
.95+(1-.95)/2
0.768*2
qt(p=.95+(1-.95)/2, df=n-1)/sqrt(n)
sp <- sqrt( ( (nx-1)*sx + (ny-1)*sy) / (nx+ny-2) )
ny <- 10
nx <- 10
my<- 3
mx<- 5
vy <- 0.6
vx <- 0.68
sp <- sqrt( ( (nx-1)*vx + (ny-1)*vy) / (nx+ny-2) )
my-mx +c(-1,1) * qt(0.975, nx+ny-2)*sp * sqrt(1/nx + 1/ny)
ny <- 9
nx <- 9
my<- -3
mx<- 1
sy <- 1.5
sx <- 1.8
sp <- sqrt( ( (nx-1)*sx^2 + (ny-1)*sy^2) / (nx+ny-2) )
my-mx +c(-1,1) * qt(0.95, nx+ny-2)*sp * sqrt(1/nx + 1/ny)
6/2.31
2/0.768
unzip("activity.zip")
unzip("./activity.zip")
load(unzip)
setwd("C:/Users/user/Desktop/Coursera/JHU Data Science/5 - Reproducible Research/HW 1/RepData_PeerAssessment1")
unzip("./activity.zip")
dat <- read.csv("activity.csv")
dim(dat)
data.table(dat)
require(data.table)
data.table(read.csv("activity.csv"))
dim(dat)
dim(split(dat, "date"))
split(dat, "date")
is.factor(date)
factor(date)
require(dplyr)
install.packages("dplyr")
install.packages("dplyr")
dat_day
dat_day <- group_by(dat, date)
library(dplyr)
dat_day <- group_by(dat, date)
dat_day
dim(dat_day)
?group_by
dat_day <- group_by(dat, date)
tot_steps_day<- summarise(dat_day, tot_num = sum(steps, na.rm = TRUE))
tot_steps_day
hist(tot_steps_day$tot_num)
dat_int <- group_by(dat, interval)
avg_steps_day <- summarise(dat_int, avg_num = mean(steps, nar.rm = TRUE))
plot(dat$interval, avg_steps_day$avg_num, type = "l")
dim(dat$interval)
dat$interval
dim(dat)
dim(avg_steps_day)
dim(dat_int)
?aggregate
dat_int <- aggregate(steps ~ interval, dat, mean)
dat_int
fim(is.na(dat))
dim(is.na(dat))
is.na(dat)
sum(is.na(dat),1)
sum(is.na(dat),2)
sum(is.na(dat),3)
dim(rowsum(is.na(dat)))
dim(sum(is.na(dat)))
sum(is.na(dat))
rowsum(is.na(dat))
sum(is.na(dat), row)
sum(is.na(dat[,1]))
dim(tot_steps_day)
tot_steps_day
dat_int$steps[ dat[is.na([dat[, 1]), 3] ]
dat_int$steps
dat_int$steps[[1]]
dat[is.na([dat[, 1]), 3]
dat[is.na(dat[, 1]), 3]
dat[is.na(dat[, 1]), 3]
dat_int$interval == dat[is.na(dat[, 1]), 3]
datdim(dat_int)
dim(dat_int)
interval == dat[is.na(dat[2, 1]), 3]
dat_int$interval == dat[is.na(dat[2, 1]), 3]
dat_int$interval == dat[is.na(dat[2, 1]), 3
dat_int$interval == dat[is.na(dat[2, 1]), 3
dat[is.na(dat[2, 1]), 3]
dat[is.na(dat[2, 1]), 3]
dat[2, 1]
which(is.na([dat[, 1]))
which(is.na([dat[, 1]which(is.na(dat[, 1])))
which(is.na(dat[, 1]))
dat[which(is.na(dat[, 1])), 1]
dat[which(is.na(dat[, 1])), 3]
dat[which(is.na(dat[, 1])), 3]  == dat_int$interval
dat_int$interval
dat[which(is.na(dat[, 1])), 3]  == dat_int$interval[[1]]
dat[which(is.na(dat[, 1])), 3] == dat_int$interval
dat[which(is.na(dat[, 1])), 3] == dat_int$interval[[i]]
dat[which(is.na(dat[, 1])), 3] == dat_int$interval[[1]]
dat_int$interval[[1]] == dat[which(is.na(dat[, 1])), 3]
dat[i, 3]
dat[1, 3]
i = 1
dat[i, 3] ==  dat_int$interval
dat_int$steps[[    dat[i, 3] ==  dat_int$interval ]]
dat_int$steps[[1 ]]
dat_int$steps[  dat[i, 3] ==  dat_int$interval ]
dat_int$steps[   dat[i, 3] == dat_int$interval   ]
dat[i, 1] = dat_int$steps[   dat[i, 3] == dat_int$interval   ]
for (i in 1:nrow(dat)){
if (is.na(dat[i, 1])){
dat[i, 1] = dat_int$steps[   dat[i, 3] == dat_int$interval   ]
}
}
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE) # echo is set true, to produce the code in the report
```
## Summary
In this report we will describe the steps taken to answer the questions as well as the code and the results.
## Loading the required packages to process the data
```{r, results='hide'}
# install.packages("dplyr", repos="http://cran.ca.r-project.org") # uncomment if needed: cran has to be set to install the library
library(data.table)
library(dplyr)
```
## Loading and preprocessing the data
The data are loaded using the following command from the local .zip file in the cloned repository:
```{r loadData}
#unzip("activity.zip") # Uncomment if needed (so it does not unzip the data automatically)
dat <- data.table(read.csv("activity.csv"))
summary(dat)
# names(dat)
```
## What is mean total number of steps taken per day?
```{r mean_day}
dat_day <- group_by(dat, date)
tot_steps_day <- summarise(dat_day, tot_num = sum(steps, na.rm = TRUE))
#tot_steps_day
summary(tot_steps_day)
# histogram of total number of steps per day
hist(tot_steps_day$tot_num, main = "Histogram of total number of steps/day",
xlab = "Total number of steps in each day")
# mean of total number of steps per day
mean(tot_steps_day$tot_num)
# median and median of total number of steps per day
median(tot_steps_day$tot_num)
```
## What is the average daily activity pattern?
```{r pattern_day}
dat_int <- aggregate(steps ~ interval, dat, mean)
plot(dat_int$interval, dat_int$steps, type = "l", main = "Tiem series of steps per interval",
xlab = "Interval", ylab = "Average steps")
# The interval with max number of steps:
dat_int[which.max(dat_int$steps), ]
```
Interval 835 has the maximum number of steps.
## Imputing missing values
```{r na.imput}
# number of rows with missing data
sum(is.na(dat))
# Filling in the missing values
dat_impt <- dat
for (i in 1:nrow(dat)){
if (is.na(dat[i, 1])){
dat_impt[i, 1] = dat_int$steps[   dat[i, 3] == dat_int$interval   ]
}
}
```
## Are there differences in activity patterns between weekdays and weekends?
dat_int$steps[   dat[i, 3] == dat_int$interval   ]
dat_int$steps[   dat[i, 3] == dat_int$interval   ]
dat_int$steps
dat[i, 3] == dat_int$interval
dat[i, 3]
dat_int$interval
dat[1, 3] == dat_int$interval
dat[i, 3] == dat_int$interval
dat_int$steps[   dat[1, 3] == dat_int$interval   ]
dat[1, 3] == dat_int$interval
dat_int$steps[  [ dat[1, 3] == dat_int$interval   ]]
dat_int$steps[  dat[1, 3] == dat_int$interval   ]
[   dat[i, 3] == dat_int$interval   ]
dat[1, 3] == dat_int$interval
dat_int$interval
dat_int$interval   == dat[1, 3]
dat_int$interval
dat_int[   dat[i, 3] == dat_int$interval   ]
dat_int[   dat[i, 3] == dat_int$interval, 2]
val <- dat[i, 3]
dat_int[   val == dat_int$interval, 2]
val == dat_int$interval
val
dat_int$interval
val == dat_int$interval
dat_int[   val == dat_int$interval   ]
dat
dim(dat)
dat[i,3]
dat_int[   dat[i, 3] == dat_int$interval , 2  ]
dat_int[   dat[i, 3] == dat_int$interval]
dim(dat_int)
dat_int[   dat[i, 3] == dat_int$interval , ]
